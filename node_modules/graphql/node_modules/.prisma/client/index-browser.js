
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.19.0
 * Query Engine version: c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d
 */
Prisma.prismaVersion = {
  client: "2.19.0",
  engine: "c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CALLScalarFieldEnum = makeEnum({
  seq: 'seq',
  createdAt: 'createdAt',
  expiredAt: 'expiredAt',
  status: 'status',
  calltext: 'calltext',
  price: 'price'
});

exports.Prisma.CARTScalarFieldEnum = makeEnum({
  seq: 'seq',
  request: 'request'
});

exports.Prisma.CHATScalarFieldEnum = makeEnum({
  seq: 'seq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.LOCATIONScalarFieldEnum = makeEnum({
  seq: 'seq',
  latitude: 'latitude',
  longitude: 'longitude',
  address: 'address'
});

exports.Prisma.MENUScalarFieldEnum = makeEnum({
  seq: 'seq',
  name: 'name',
  thumbnail: 'thumbnail',
  description: 'description',
  price: 'price',
  isAvailable: 'isAvailable',
  bestmenu: 'bestmenu'
});

exports.Prisma.MESSAGEScalarFieldEnum = makeEnum({
  seq: 'seq',
  text: 'text',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.OPTIONScalarFieldEnum = makeEnum({
  seq: 'seq',
  category: 'category',
  isRequired: 'isRequired',
  isMultiple: 'isMultiple'
});

exports.Prisma.OPTION_ITEMScalarFieldEnum = makeEnum({
  seq: 'seq',
  content: 'content',
  price: 'price'
});

exports.Prisma.ORDERScalarFieldEnum = makeEnum({
  seq: 'seq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deliveryTime: 'deliveryTime',
  status: 'status'
});

exports.Prisma.REPLYScalarFieldEnum = makeEnum({
  seq: 'seq',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.REPORTScalarFieldEnum = makeEnum({
  seq: 'seq',
  reason: 'reason',
  isSolved: 'isSolved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RES_REVIEWScalarFieldEnum = makeEnum({
  seq: 'seq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  rate: 'rate',
  content: 'content',
  image: 'image'
});

exports.Prisma.RESTAURANTScalarFieldEnum = makeEnum({
  seq: 'seq',
  id: 'id',
  password: 'password',
  createdAt: 'createdAt',
  dayoff: 'dayoff',
  isOpen: 'isOpen',
  minOrder: 'minOrder',
  deliveryTip: 'deliveryTip',
  seperatable: 'seperatable',
  introduction: 'introduction',
  thumbnail: 'thumbnail',
  rate: 'rate',
  category: 'category'
});

exports.Prisma.RUN_TIMEScalarFieldEnum = makeEnum({
  seq: 'seq',
  day: 'day',
  open: 'open',
  close: 'close'
});

exports.Prisma.SELECTED_MENUScalarFieldEnum = makeEnum({
  seq: 'seq',
  count: 'count'
});

exports.Prisma.USERScalarFieldEnum = makeEnum({
  seq: 'seq',
  ID: 'ID',
  password: 'password',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  thumbnail: 'thumbnail',
  token: 'token',
  status: 'status'
});

exports.Prisma.USER_REVIEWScalarFieldEnum = makeEnum({
  seq: 'seq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  rate: 'rate',
  content: 'content'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});
exports.CALL_status = makeEnum({
  isActivated: 'isActivated',
  isMatched: 'isMatched',
  isExpired: 'isExpired',
  isCompleted: 'isCompleted'
});

exports.ORDER_status = makeEnum({
  Recieved: 'Recieved',
  inDelivery: 'inDelivery',
  canceled: 'canceled',
  completed: 'completed'
});

exports.USER_status = makeEnum({
  Active: 'Active',
  Stop: 'Stop',
  Withdraw: 'Withdraw'
});

exports.Prisma.ModelName = makeEnum({
  CALL: 'CALL',
  CART: 'CART',
  CHAT: 'CHAT',
  LOCATION: 'LOCATION',
  MENU: 'MENU',
  MESSAGE: 'MESSAGE',
  OPTION: 'OPTION',
  OPTION_ITEM: 'OPTION_ITEM',
  ORDER: 'ORDER',
  REPLY: 'REPLY',
  REPORT: 'REPORT',
  RES_REVIEW: 'RES_REVIEW',
  RESTAURANT: 'RESTAURANT',
  RUN_TIME: 'RUN_TIME',
  SELECTED_MENU: 'SELECTED_MENU',
  USER: 'USER',
  USER_REVIEW: 'USER_REVIEW'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
